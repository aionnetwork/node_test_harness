plugins {
    id 'java-library'
}

targetCompatibility = 10
sourceCompatibility = 10

sourceSets {
    main { 
        java.srcDirs = ['src']
        resources.srcDirs = ['src_resources']
    }
    test { 
        java.srcDirs = ['test']
        resources.srcDirs = ['test_resources']
    }
}

repositories {
    jcenter()
}

dependencies {
    api fileTree(dir: 'lib', include: ['*.jar'])
    api project(':TestHarness') 

    testImplementation 'junit:junit:4.12'
    testImplementation fileTree(dir: 'lib', include: ['*.jar'])
    testImplementation fileTree(dir: '../TestHarness/lib', include: ['*.jar'])
}

task copyCustomConfig(type: Copy) { 
    if ( !project.file("aion").exists() || !project.file("aion").isDirectory() ) {
        throw new GradleException("Can't override Aion kernel config because aion directory not present.");
    }
    from project.file("test_resources/custom")
    into project.file("aion/custom")
}

task copyMainnetConfig(type: Copy) {
    if ( !project.file("aion").exists() || !project.file("aion").isDirectory() ) {
        throw new GradleException("Can't override Aion kernel config because aion directory not present.");
    }
    from project.file("test_resources/mainnet")
    into project.file("aion/mainnet")
}

task copyMasteryConfig(type: Copy) {
    if ( !project.file("aion").exists() || !project.file("aion").isDirectory() ) {
        throw new GradleException("Can't override Aion kernel config because aion directory not present.");
    }
    from project.file("test_resources/mastery")
    into project.file("aion/mastery")
}

task waitForPorts(type: Exec) { 
    commandLine 'bash', "bin/wait-for-ports.sh"
}

task ciTest
ciTest.dependsOn copyCustomConfig
ciTest.dependsOn copyMainnetConfig
ciTest.dependsOn copyMasteryConfig
ciTest.dependsOn waitForPorts
ciTest.dependsOn test

build.dependsOn.remove('check')  // don't run tests on build
test.mustRunAfter copyCustomConfig
test.mustRunAfter waitForPorts
test.outputs.upToDateWhen {false} // make test target always run even if source didn't change
test { testResultsDirName = "${rootProject.projectDir}/report/FunctionalTests" }
